// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: books.sql

package database

import (
	"context"
	"time"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books
(user_id,isbn, title, author, category, publisher, year_of_publishing,
img, number_of_pages, personal_rating, personal_notes, read_status, read_date)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING id
`

type CreateBookParams struct {
	UserID           int32
	Isbn             string
	Title            string
	Author           string
	Category         string
	Publisher        string
	YearOfPublishing int32
	Img              string
	NumberOfPages    int32
	PersonalRating   float64
	PersonalNotes    string
	ReadStatus       bool
	ReadDate         time.Time
}

// TODO: year_of_publishing better naming,
// number_of_pages?
// year_of_publishing to publish_date
// read_status and read_date should be nullable
// personal_rating should be nullable
// personal_notes should be nullable
// img should be nullable
// number_of_pages should be nullable
// publisher should be nullable
// category should be nullable
func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.UserID,
		arg.Isbn,
		arg.Title,
		arg.Author,
		arg.Category,
		arg.Publisher,
		arg.YearOfPublishing,
		arg.Img,
		arg.NumberOfPages,
		arg.PersonalRating,
		arg.PersonalNotes,
		arg.ReadStatus,
		arg.ReadDate,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books WHERE id=$1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBookByID = `-- name: GetBookByID :one
SELECT id, title, isbn, author, category, publisher, year_of_publishing, img, number_of_pages, personal_rating, personal_notes, read_status, read_date, user_id FROM books WHERE id = $1
`

// TODO: change this to get book by isbn
func (q *Queries) GetBookByID(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByID, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Isbn,
		&i.Author,
		&i.Category,
		&i.Publisher,
		&i.YearOfPublishing,
		&i.Img,
		&i.NumberOfPages,
		&i.PersonalRating,
		&i.PersonalNotes,
		&i.ReadStatus,
		&i.ReadDate,
		&i.UserID,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, title, isbn, author, category, publisher, year_of_publishing, img, number_of_pages, personal_rating, personal_notes, read_status, read_date, user_id FROM books where user_id=$1 ORDER BY id DESC LIMIT 10 OFFSET $2
`

type GetBooksParams struct {
	UserID int32
	Offset int32
}

func (q *Queries) GetBooks(ctx context.Context, arg GetBooksParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks, arg.UserID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Isbn,
			&i.Author,
			&i.Category,
			&i.Publisher,
			&i.YearOfPublishing,
			&i.Img,
			&i.NumberOfPages,
			&i.PersonalRating,
			&i.PersonalNotes,
			&i.ReadStatus,
			&i.ReadDate,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksBy = `-- name: GetBooksBy :many
SELECT id, title, isbn, author, category, publisher, year_of_publishing, img, number_of_pages, personal_rating, personal_notes, read_status, read_date, user_id from books WHERE user_id=$1 AND (to_tsvector('simple', title) @@ plainto_tsquery('simple', $2) OR $2 = '')
ORDER BY id DESC LIMIT 10 OFFSET $3
`

type GetBooksByParams struct {
	UserID         int32
	PlaintoTsquery string
	Offset         int32
}

// SELECT * FROM books ORDER BY id DESC LIMIT 10 OFFSET $1 where title LIKE $2;
func (q *Queries) GetBooksBy(ctx context.Context, arg GetBooksByParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksBy, arg.UserID, arg.PlaintoTsquery, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Isbn,
			&i.Author,
			&i.Category,
			&i.Publisher,
			&i.YearOfPublishing,
			&i.Img,
			&i.NumberOfPages,
			&i.PersonalRating,
			&i.PersonalNotes,
			&i.ReadStatus,
			&i.ReadDate,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksLength = `-- name: GetBooksLength :one
SELECT COUNT(*) FROM books
`

func (q *Queries) GetBooksLength(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBooksLength)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books SET isbn=$2, title=$3, author=$4, category=$5, publisher=$6, year_of_publishing=$7,
img=$8, number_of_pages=$9, personal_rating=$10, personal_notes=$11, read_status=$12, read_date=$13
WHERE id=$1
`

type UpdateBookParams struct {
	ID               int32
	Isbn             string
	Title            string
	Author           string
	Category         string
	Publisher        string
	YearOfPublishing int32
	Img              string
	NumberOfPages    int32
	PersonalRating   float64
	PersonalNotes    string
	ReadStatus       bool
	ReadDate         time.Time
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook,
		arg.ID,
		arg.Isbn,
		arg.Title,
		arg.Author,
		arg.Category,
		arg.Publisher,
		arg.YearOfPublishing,
		arg.Img,
		arg.NumberOfPages,
		arg.PersonalRating,
		arg.PersonalNotes,
		arg.ReadStatus,
		arg.ReadDate,
	)
	return err
}
